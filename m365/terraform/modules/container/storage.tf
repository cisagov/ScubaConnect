locals {
  sa_prefix    = replace(var.resource_prefix, "-", "")
  sa_unique_id = substr(replace(var.application_client_id, "-", ""), 0, 24 - length(local.sa_prefix))
}

# Azure Storage Account used by the ScubaGear container
resource "azurerm_storage_account" "storage" {
  count               = var.output_storage_container_url == null || var.input_storage_container_url == null ? 1 : 0
  name                = "${local.sa_prefix}${local.sa_unique_id}"
  resource_group_name = var.resource_group.name
  location            = var.resource_group.location

  account_tier                      = "Standard"
  account_replication_type          = "GZRS"
  account_kind                      = "StorageV2"
  infrastructure_encryption_enabled = true
  https_traffic_only_enabled        = true
  allow_nested_items_to_be_public   = false
  min_tls_version                   = "TLS1_2"
  identity {
    type = "SystemAssigned"
  }

  dynamic "network_rules" {
    for_each = var.allowed_access_ips == null ? [] : [1]
    content {
      default_action             = "Deny"
      ip_rules                   = var.allowed_access_ips
      virtual_network_subnet_ids = var.subnet_ids
      bypass                     = ["AzureServices"]
    }
  }

  lifecycle {
    ignore_changes = [tags]
  }
}

# Allows the app registration used by the ScubaGear container to read/write to the storage account
resource "azurerm_role_assignment" "app_storage_role" {
  count                = var.output_storage_container_url == null || var.input_storage_container_url == null ? 1 : 0
  scope                = azurerm_storage_account.storage[0].id
  role_definition_name = "Storage Blob Data Contributor"
  principal_id         = var.application_object_id
}

# Container to store reports generated by ScubaGear
resource "azurerm_storage_container" "output" {
  count                 = var.output_storage_container_url == null ? 1 : 0
  name                  = "${var.resource_prefix}-output"
  storage_account_id    = azurerm_storage_account.storage[0].id
  container_access_type = "private"
}

# Container to store configuration read by ScubaGear
resource "azurerm_storage_container" "input" {
  count                 = var.input_storage_container_url == null ? 1 : 0
  name                  = "${var.resource_prefix}-input"
  storage_account_id    = azurerm_storage_account.storage[0].id
  container_access_type = "private"
}

resource "azurerm_storage_blob" "keep_files" {
  for_each               = local.container_types
  name                   = "${each.key}/.keep"
  storage_account_name   = azurerm_storage_account.storage[0].name
  storage_container_name = azurerm_storage_container.input[0].name
  type                   = "Block"
  source_content         = "File used for keeping directory structure in absence of config files"

  lifecycle {
    ignore_changes = [
      cache_control
    ]
  }
}


# Blobs containing configuration for each tenant
resource "azurerm_storage_blob" "tenants" {
  for_each               = { for typeFile in setproduct(local.container_types, fileset(var.tenants_dir_path, "*")): "${typeFile[0]}/${typeFile[1]}" => typeFile[1] }
  name                   = each.key
  storage_account_name   = azurerm_storage_account.storage[0].name
  storage_container_name = azurerm_storage_container.input[0].name
  type                   = "Block"
  source                 = "${var.tenants_dir_path}/${each.value}"

  lifecycle {
    ignore_changes = [
      cache_control
    ]
  }
}

locals {
  input_storage_container_url  = var.input_storage_container_url == null ? "${azurerm_storage_account.storage[0].primary_blob_endpoint}${azurerm_storage_container.input[0].name}" : var.input_storage_container_url
  output_storage_container_url = var.output_storage_container_url == null ? "${azurerm_storage_account.storage[0].primary_blob_endpoint}${azurerm_storage_container.output[0].name}" : var.output_storage_container_url
}